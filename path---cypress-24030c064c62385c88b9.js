webpackJsonp([0x9703323220f9],{802:function(n,s){n.exports={data:{page:{id:"/home/cypress/website1/content/pages/3--cypress/index.md absPath of file >>> MarkdownRemark",html:'<h2>expect</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">BDD Assertions\nexpect<span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span>.to.have.length<span class="token punctuation">(</span>3<span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span><span class="token variable">$p</span>.first<span class="token punctuation">(</span><span class="token punctuation">))</span>.to.contain<span class="token punctuation">(</span><span class="token string">\'Hello World\'</span><span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span>name<span class="token punctuation">)</span>.to.not.equal<span class="token punctuation">(</span><span class="token string">\'Jane\'</span><span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">)</span>.to.be.a<span class="token punctuation">(</span><span class="token string">\'string\'</span><span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span><span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span><span class="token punctuation">)</span>.to.include<span class="token punctuation">(</span>2<span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span>true<span class="token punctuation">)</span>.to.be.true\nexpect<span class="token punctuation">(</span>false<span class="token punctuation">)</span>.to.be.false\nexpect<span class="token punctuation">(</span>null<span class="token punctuation">)</span>.to.be.null\nexpect<span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>.to.be.undefined\nexpect<span class="token punctuation">(</span>42<span class="token punctuation">)</span>.to.equal<span class="token punctuation">(</span>42<span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">\'Jane\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>.to.deep.equal<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">\'Jane\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">\'Jane\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>.to.eql<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">\'Jane\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span>10<span class="token punctuation">)</span>.to.be.greaterThan<span class="token punctuation">(</span>5<span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span>5<span class="token punctuation">)</span>.to.be.lessThan<span class="token punctuation">(</span>10<span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span>7<span class="token punctuation">)</span>.to.be.within<span class="token punctuation">(</span>5,10<span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span><span class="token punctuation">[</span>1, 2, 3<span class="token punctuation">]</span><span class="token punctuation">)</span>.to.be.instanceOf<span class="token punctuation">(</span>Array<span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>.to.have.property<span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">)</span>.to.have.lengthOf<span class="token punctuation">(</span>3<span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span><span class="token string">\'testing\'</span><span class="token punctuation">)</span>.to.match<span class="token punctuation">(</span>/^test/<span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span><span class="token punctuation">[</span>1, 2, 3<span class="token punctuation">]</span><span class="token punctuation">)</span>.to.include.members<span class="token punctuation">(</span><span class="token punctuation">[</span>3, 2<span class="token punctuation">]</span><span class="token punctuation">)</span>\nexpect<span class="token punctuation">(</span>2<span class="token punctuation">)</span>.to.be.oneOf<span class="token punctuation">(</span><span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>check</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'[type="checkbox"]\'</span><span class="token punctuation">)</span>.check<span class="token punctuation">(</span><span class="token punctuation">)</span>  \n\ncy.get<span class="token punctuation">(</span><span class="token string">\'[type="radio"]\'</span><span class="token punctuation">)</span>.first<span class="token punctuation">(</span><span class="token punctuation">)</span>.check<span class="token punctuation">(</span><span class="token punctuation">)</span>  \n\ncy.get<span class="token punctuation">(</span><span class="token string">\'#saveUserName\'</span><span class="token punctuation">)</span>.check<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'[type="radio"]\'</span><span class="token punctuation">)</span>.check<span class="token punctuation">(</span><span class="token string">\'US\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'[type="checkbox"]\'</span><span class="token punctuation">)</span>.check<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'ga\'</span>, <span class="token string">\'ca\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'.action-checkboxes\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'not.be.visible\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>clear</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'[type="text"]\'</span><span class="token punctuation">)</span>.clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        // Clear text input\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'textarea\'</span><span class="token punctuation">)</span>.type<span class="token punctuation">(</span><span class="token string">\'Hi!\'</span><span class="token punctuation">)</span>.clear<span class="token punctuation">(</span><span class="token punctuation">)</span> // Clear textarea\n\ncy.focused<span class="token punctuation">(</span><span class="token punctuation">)</span>.clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                   // Clear focused input/textarea\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'textarea\'</span><span class="token punctuation">)</span>.clear<span class="token punctuation">(</span><span class="token punctuation">)</span>.type<span class="token punctuation">(</span><span class="token string">\'Hello, World\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'input[name="name"]\'</span><span class="token punctuation">)</span>.clear<span class="token punctuation">(</span><span class="token punctuation">)</span>.type<span class="token punctuation">(</span><span class="token string">\'Jane Lane\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>click</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>          // Click on button\n\ncy.focused<span class="token punctuation">(</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>              // Click on el with focus\n\ncy.contains<span class="token punctuation">(</span><span class="token string">\'Welcome\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>    // Click on first el containing <span class="token string">\'Welcome\'</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">{</span> force: <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">{</span> multiple: <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> // Click all buttons found on the page</code></pre>\n      </div>\n<h2>contains</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'.nav\'</span><span class="token punctuation">)</span>.contains<span class="token punctuation">(</span><span class="token string">\'About\'</span><span class="token punctuation">)</span>  // Yield el <span class="token keyword">in</span> .nav containing <span class="token string">\'About\'</span>\n\ncy.contains<span class="token punctuation">(</span><span class="token string">\'Hello\'</span><span class="token punctuation">)</span>              // Yield first el <span class="token keyword">in</span> document containing <span class="token string">\'Hello\'</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\ncy.contains<span class="token punctuation">(</span><span class="token string">\'apples\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"main"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>form<span class="token operator">></span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>label<span class="token operator">></span>name<span class="token operator">&lt;</span>/label<span class="token operator">></span>\n      <span class="token operator">&lt;</span>input name<span class="token operator">=</span><span class="token string">"name"</span> /<span class="token operator">></span>\n    <span class="token operator">&lt;</span>/div<span class="token operator">></span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>label<span class="token operator">></span>age<span class="token operator">&lt;</span>/label<span class="token operator">></span>\n      <span class="token operator">&lt;</span>input name<span class="token operator">=</span><span class="token string">"age"</span> /<span class="token operator">></span>\n    <span class="token operator">&lt;</span>/div<span class="token operator">></span>\n    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"submit the form!"</span> /<span class="token operator">></span>\n  <span class="token operator">&lt;</span>/form<span class="token operator">></span>\n<span class="token operator">&lt;</span>/div<span class="token operator">></span>\n\n// yields input<span class="token punctuation">[</span>type<span class="token operator">=</span><span class="token string">\'submit\'</span><span class="token punctuation">]</span> element <span class="token keyword">then</span> clicks it\ncy.get<span class="token punctuation">(</span><span class="token string">\'form\'</span><span class="token punctuation">)</span>.contains<span class="token punctuation">(</span><span class="token string">\'submit the form!\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span>button class<span class="token operator">=</span><span class="token string">"btn btn-primary"</span> type<span class="token operator">=</span><span class="token string">"button"</span><span class="token operator">></span>\n  Messages <span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"badge"</span><span class="token operator">></span>4<span class="token operator">&lt;</span>/span<span class="token operator">></span>\n<span class="token operator">&lt;</span>/button<span class="token operator">></span>\n// yields <span class="token operator">&lt;</span>button<span class="token operator">></span>\ncy.contains<span class="token punctuation">(</span>4<span class="token punctuation">)</span></code></pre>\n      </div>\n<p><a href="https://docs.cypress.io/api/commands/contains.html#Selector">Specify a selector to return a specific element</a></p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">Specify a selector to <span class="token keyword">return</span> a specific element\nTechnically the <span class="token operator">&lt;</span>html<span class="token operator">></span>, <span class="token operator">&lt;</span>body<span class="token operator">></span>, <span class="token operator">&lt;</span>ul<span class="token operator">></span>, and first <span class="token operator">&lt;</span>li<span class="token operator">></span> <span class="token keyword">in</span> the example below all contain “apples”.\nNormally Cypress would <span class="token keyword">return</span> the first <span class="token operator">&lt;</span>li<span class="token operator">></span> since that is the deepest element that contains “apples”.\nTo override the element that is yielded we can pass ‘ul’ as the selector.\n\n<span class="token operator">&lt;</span>html<span class="token operator">></span>\n  <span class="token operator">&lt;</span>body<span class="token operator">></span>\n    <span class="token operator">&lt;</span>ul<span class="token operator">></span>\n      <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n      <span class="token operator">&lt;</span>li<span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n      <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n    <span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>/body<span class="token operator">></span>\n<span class="token operator">&lt;</span>/html<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\ncy.contains<span class="token punctuation">(</span><span class="token string">\'ul\'</span>, <span class="token string">\'apples\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">Keep the form as the subject\nHere’s an example that uses the selector to ensure that the <span class="token operator">&lt;</span>form<span class="token operator">></span> remains the subject <span class="token keyword">for</span> future chaining.\n\n<span class="token operator">&lt;</span>form<span class="token operator">></span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    <span class="token operator">&lt;</span>label<span class="token operator">></span>name<span class="token operator">&lt;</span>/label<span class="token operator">></span>\n    <span class="token operator">&lt;</span>input name<span class="token operator">=</span><span class="token string">"name"</span> /<span class="token operator">></span>\n  <span class="token operator">&lt;</span>/div<span class="token operator">></span>\n  <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>Proceed<span class="token operator">&lt;</span>/button<span class="token operator">></span>\n<span class="token operator">&lt;</span>/form<span class="token operator">></span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'form\'</span><span class="token punctuation">)</span>                  // yields <span class="token operator">&lt;</span>form<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/form<span class="token operator">></span>\n  .contains<span class="token punctuation">(</span><span class="token string">\'form\'</span>, <span class="token string">\'Proceed\'</span><span class="token punctuation">)</span>  // yields <span class="token operator">&lt;</span>form<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/form<span class="token operator">></span>\n  .submit<span class="token punctuation">(</span><span class="token punctuation">)</span>                     // yields <span class="token operator">&lt;</span>form<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token operator">&lt;</span>/form<span class="token operator">></span></code></pre>\n      </div>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.contains<span class="token punctuation">(</span><span class="token string">\'Log In\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'#checkout-container\'</span><span class="token punctuation">)</span>.contains<span class="token punctuation">(</span><span class="token string">\'Buy Now\'</span><span class="token punctuation">)</span>\n\ncy.contains<span class="token punctuation">(</span><span class="token string">\'Delete User\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p><a href="https://docs.cypress.io/api/commands/contains.html#Only-the-first-matched-element-will-be-returned">Only the first matched element will be returned</a></p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Welcome, Jane Lane<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"main"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>span<span class="token operator">></span>These <span class="token function">users</span> have 10 connections with Jane Lane<span class="token operator">&lt;</span>/span<span class="token operator">></span>\n  <span class="token operator">&lt;</span>ul<span class="token operator">></span>\n    <span class="token operator">&lt;</span>li<span class="token operator">></span>Jamal<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n    <span class="token operator">&lt;</span>li<span class="token operator">></span>Patricia<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n<span class="token operator">&lt;</span>/div<span class="token operator">></span>\n\nThe below example will <span class="token keyword">return</span> the <span class="token operator">&lt;</span>li<span class="token operator">></span> <span class="token keyword">in</span> the <span class="token comment">#header since that is the first element that contains the text “Jane Lane”.</span>\n// yields <span class="token comment">#header li</span>\ncy.contains<span class="token punctuation">(</span><span class="token string">\'Jane Lane\'</span><span class="token punctuation">)</span>\n\nIf you wanted to <span class="token keyword">select</span> the <span class="token operator">&lt;</span>span<span class="token operator">></span> instead, you could narrow the elements yielded before the .contains<span class="token punctuation">(</span><span class="token punctuation">)</span>.\n// yields <span class="token operator">&lt;</span>span<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'#main\'</span><span class="token punctuation">)</span>.contains<span class="token punctuation">(</span><span class="token string">\'Jane Lane\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p><a href="https://docs.cypress.io/api/commands/contains.html#Favor-of-lt-a-gt-over-other-deeper-elements">Favor of &#x3C;a> over other deeper elements</a></p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span>nav<span class="token operator">></span>\n  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/users"</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>span<span class="token operator">></span>Users<span class="token operator">&lt;</span>/span<span class="token operator">></span>\n  <span class="token operator">&lt;</span>/a<span class="token operator">></span>\n  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/signout"</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>span<span class="token operator">></span>Sign Out<span class="token operator">&lt;</span>/span<span class="token operator">></span>\n  <span class="token operator">&lt;</span>/a<span class="token operator">></span>\n<span class="token operator">&lt;</span>/nav<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>a<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'nav\'</span><span class="token punctuation">)</span>.contains<span class="token punctuation">(</span><span class="token string">\'Sign Out\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.attr\'</span>, <span class="token string">\'href\'</span>, <span class="token string">\'/signout\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>eq</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'tbody>tr\'</span><span class="token punctuation">)</span>.eq<span class="token punctuation">(</span>0<span class="token punctuation">)</span>    // Yield first <span class="token string">\'tr\'</span> <span class="token keyword">in</span> <span class="token string">\'tbody\'</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'ul>li\'</span><span class="token punctuation">)</span>.eq<span class="token punctuation">(</span>4<span class="token punctuation">)</span>       // Yield fifth <span class="token string">\'li\'</span> <span class="token keyword">in</span> <span class="token string">\'ul\'</span>\n\n\nFind the 2nd element within the elements\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>tabby<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>siamese<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>persian<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>sphynx<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>burmese<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'li\'</span><span class="token punctuation">)</span>.eq<span class="token punctuation">(</span>1<span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'contain\'</span>, <span class="token string">\'siamese\'</span><span class="token punctuation">)</span> // <span class="token boolean">true</span>\n\n\nMake an assertion on the 3rd row of a table\n<span class="token operator">&lt;</span>table<span class="token operator">></span>\n  <span class="token operator">&lt;</span>tr<span class="token operator">></span>\n    <span class="token operator">&lt;</span>th<span class="token operator">></span>Breed<span class="token operator">&lt;</span>/th<span class="token operator">></span>\n    <span class="token operator">&lt;</span>th<span class="token operator">></span>Origin<span class="token operator">&lt;</span>/th<span class="token operator">></span>\n  <span class="token operator">&lt;</span>/tr<span class="token operator">></span>\n  <span class="token operator">&lt;</span>tr<span class="token operator">></span>\n    <span class="token operator">&lt;</span>td<span class="token operator">></span>Siamese<span class="token operator">&lt;</span>/td<span class="token operator">></span>\n    <span class="token operator">&lt;</span>td<span class="token operator">></span>Thailand<span class="token operator">&lt;</span>/td<span class="token operator">></span>\n  <span class="token operator">&lt;</span>/tr<span class="token operator">></span>\n  <span class="token operator">&lt;</span>tr<span class="token operator">></span>\n    <span class="token operator">&lt;</span>td<span class="token operator">></span>Sphynx<span class="token operator">&lt;</span>/td<span class="token operator">></span>\n    <span class="token operator">&lt;</span>td<span class="token operator">></span>Canada<span class="token operator">&lt;</span>/td<span class="token operator">></span>\n  <span class="token operator">&lt;</span>/tr<span class="token operator">></span>\n  <span class="token operator">&lt;</span>tr<span class="token operator">></span>\n    <span class="token operator">&lt;</span>td<span class="token operator">></span>Persian<span class="token operator">&lt;</span>/td<span class="token operator">></span>\n    <span class="token operator">&lt;</span>td<span class="token operator">></span>Iran<span class="token operator">&lt;</span>/td<span class="token operator">></span>\n<span class="token operator">&lt;</span>/table<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'tr\'</span><span class="token punctuation">)</span>.eq<span class="token punctuation">(</span>2<span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'contain\'</span>, <span class="token string">\'Canada\'</span><span class="token punctuation">)</span>  //true\n\n\nFind the 2nd from the last element within the elements\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>tabby<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>siamese<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>persian<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>sphynx<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>burmese<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'li\'</span><span class="token punctuation">)</span>.eq<span class="token punctuation">(</span>-2<span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'contain\'</span>, <span class="token string">\'sphynx\'</span><span class="token punctuation">)</span> // <span class="token boolean">true</span>\n\n\nFind the 4th <span class="token operator">&lt;</span>li<span class="token operator">></span> <span class="token keyword">in</span> the navigation\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'.left-nav.nav\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'>li\'</span><span class="token punctuation">)</span>.eq<span class="token punctuation">(</span>3<span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>filter</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'td\'</span><span class="token punctuation">)</span>.filter<span class="token punctuation">(</span><span class="token string">\'.users\'</span><span class="token punctuation">)</span> // Yield all el<span class="token string">\'s with class \'</span>.users<span class="token string">\'\n\n\nFilter the current subject to the elements with the class ‘active’\n&lt;ul>\n  &lt;li>Home&lt;/li>\n  &lt;li class="active">About&lt;/li>\n  &lt;li>Services&lt;/li>\n  &lt;li>Pricing&lt;/li>\n  &lt;li>Contact&lt;/li>\n&lt;/ul>\n// yields &lt;li>About&lt;/li>\ncy.get(\'</span>ul<span class="token string">\').find(\'</span><span class="token operator">></span>li<span class="token string">\').filter(\'</span>.active<span class="token string">\')\n\n\ncy.get(\'</span>.left-nav<span class="token operator">></span>.nav<span class="token string">\').find(\'</span><span class="token operator">></span>li<span class="token string">\').filter(\'</span>.active\'<span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>find</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'.article\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'footer\'</span><span class="token punctuation">)</span> // Yield <span class="token string">\'footer\'</span> within <span class="token string">\'.article\'</span>\n\n\nGet li’s within parent\n<span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"first"</span><span class="token operator">></span><span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"second"</span><span class="token operator">></span><span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n// yields <span class="token punctuation">[</span><span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"first"</span><span class="token operator">></span><span class="token operator">&lt;</span>/li<span class="token operator">></span>, <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"second"</span><span class="token operator">></span><span class="token operator">&lt;</span>/li<span class="token operator">></span><span class="token punctuation">]</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'#parent\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'li\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>first</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'nav a\'</span><span class="token punctuation">)</span>.first<span class="token punctuation">(</span><span class="token punctuation">)</span>     // Yield first <span class="token function">link</span> <span class="token keyword">in</span> nav\n\nGet the first list item <span class="token keyword">in</span> a list\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>Knick knack on my thumb<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"two"</span><span class="token operator">></span>Knick knack on my shoe<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"three"</span><span class="token operator">></span>Knick knack on my knee<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"four"</span><span class="token operator">></span>Knick knack on my door<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n// yields <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>Knick knack on my thumb<span class="token operator">&lt;</span>/li<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'li\'</span><span class="token punctuation">)</span>.first<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nFind the first input <span class="token keyword">in</span> the form\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'form\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span>.first<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>focus</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span>.first<span class="token punctuation">(</span><span class="token punctuation">)</span>.focus<span class="token punctuation">(</span><span class="token punctuation">)</span> // Focus on the first input\n\nFocus on an input\ncy.get<span class="token punctuation">(</span><span class="token string">\'[type="input"]\'</span><span class="token punctuation">)</span>.focus<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nFocus, type, and blur a textarea\n// yields the <span class="token operator">&lt;</span>textarea<span class="token operator">></span> <span class="token keyword">for</span> further chaining\ncy.get<span class="token punctuation">(</span><span class="token string">\'textarea\'</span><span class="token punctuation">)</span>.focus<span class="token punctuation">(</span><span class="token punctuation">)</span>.type<span class="token punctuation">(</span><span class="token string">\'Nice Product!\'</span><span class="token punctuation">)</span>.blur<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nFocus the textarea\ncy.get<span class="token punctuation">(</span><span class="token string">\'[name="comment"]\'</span><span class="token punctuation">)</span>.focus<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>cy.get</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'.err\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'#header a\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'button[type=submit]\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'form\'</span><span class="token punctuation">)</span>.submit<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'[type="email"]\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'[name="comment"]\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'input:first\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'[type="checkbox"]\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'[type="radio"]\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'[name="comment"]\'</span><span class="token punctuation">)</span>.focus<span class="token punctuation">(</span><span class="token punctuation">)</span>.type<span class="token punctuation">(</span><span class="token string">\'Nice Product!\'</span><span class="token punctuation">)</span>\n\nGet an input and assert on the value\ncy.get<span class="token punctuation">(</span><span class="token string">\'input[name="firstName"]\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.value\'</span>, <span class="token string">\'Homer\'</span><span class="token punctuation">)</span>\n\nGet the input element\ncy.get<span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'be.disabled\'</span><span class="token punctuation">)</span>\n\nFind the first li descendent within a ul\ncy.get<span class="token punctuation">(</span><span class="token string">\'ul li:first\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.class\'</span>, <span class="token string">\'active\'</span><span class="token punctuation">)</span>\n\nFind the dropdown-menu and click it\ncy.get<span class="token punctuation">(</span><span class="token string">\'.dropdown-menu\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nFind 5 elements with the given data attribute\ncy.get<span class="token punctuation">(</span><span class="token string">\'[data-test-id="test-example"]\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.length\'</span>, 5<span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>its</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.wrap<span class="token punctuation">(</span><span class="token punctuation">{</span> width: <span class="token string">\'50\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>.its<span class="token punctuation">(</span><span class="token string">\'width\'</span><span class="token punctuation">)</span> // Get the <span class="token string">\'width\'</span> property\n\nGet property\ncy.wrap<span class="token punctuation">(</span><span class="token punctuation">{</span> age: 52 <span class="token punctuation">}</span><span class="token punctuation">)</span>.its<span class="token punctuation">(</span><span class="token string">\'age\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'eq\'</span>, 52<span class="token punctuation">)</span> // <span class="token boolean">true</span>\n\n\nGet property\ncy.wrap<span class="token punctuation">(</span><span class="token punctuation">{</span> age: 52 <span class="token punctuation">}</span><span class="token punctuation">)</span>.its<span class="token punctuation">(</span><span class="token string">\'age\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'eq\'</span>, 52<span class="token punctuation">)</span> // <span class="token boolean">true</span>\n\n\nGet the user object of the response’s body\ncy\n  .request<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>\n  .its<span class="token punctuation">(</span><span class="token string">\'body.user\'</span><span class="token punctuation">)</span>\n  .then<span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">..</span>.<span class="token punctuation">)</span>\n\nalternatively, use destructuring\ncy\n  .request<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>\n  .its<span class="token punctuation">(</span><span class="token string">\'body\'</span><span class="token punctuation">)</span>\n  .then<span class="token punctuation">((</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">..</span>.<span class="token punctuation">)</span>\n\nGet length of title\ncy.title<span class="token punctuation">(</span><span class="token punctuation">)</span>.its<span class="token punctuation">(</span><span class="token string">\'length\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'eq\'</span>, 24<span class="token punctuation">)</span>\n\nYou can drill into nested properties by using dot notation.\n\nconst user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contacts: <span class="token punctuation">{</span>\n    work: <span class="token punctuation">{</span>\n      name: <span class="token string">\'Kamil\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ncy.wrap<span class="token punctuation">(</span>user<span class="token punctuation">)</span>.its<span class="token punctuation">(</span><span class="token string">\'contacts.work.name\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'eq\'</span>, <span class="token string">\'Kamil\'</span><span class="token punctuation">)</span> // <span class="token boolean">true</span></code></pre>\n      </div>\n<h2>last</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'nav a\'</span><span class="token punctuation">)</span>.last<span class="token punctuation">(</span><span class="token punctuation">)</span>     // Yield last <span class="token function">link</span> <span class="token keyword">in</span> nav\n\nGet the last list item <span class="token keyword">in</span> a list\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>Knick knack on my thumb<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"two"</span><span class="token operator">></span>Knick knack on my shoe<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"three"</span><span class="token operator">></span>Knick knack on my knee<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"four"</span><span class="token operator">></span>Knick knack on my door<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"four"</span><span class="token operator">></span>Knick knack on my door<span class="token operator">&lt;</span>/li<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'li\'</span><span class="token punctuation">)</span>.last<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\nFind the last button <span class="token keyword">in</span> the form\ncy.get<span class="token punctuation">(</span><span class="token string">\'form\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span>.last<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>next</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'nav a:first\'</span><span class="token punctuation">)</span>.next<span class="token punctuation">(</span><span class="token punctuation">)</span> // Yield next <span class="token function">link</span> <span class="token keyword">in</span> nav\n\nFind the element next to .second\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"second"</span><span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'.second\'</span><span class="token punctuation">)</span>.next<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nFind the very next sibling of each li. Keep only the ones with a class selected\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"selected"</span><span class="token operator">></span>pineapples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>li<span class="token operator">></span>pineapples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'li\'</span><span class="token punctuation">)</span>.next<span class="token punctuation">(</span><span class="token string">\'.selected\'</span><span class="token punctuation">)</span>\n\n\nFind the element next to the .active li\ncy.get<span class="token punctuation">(</span><span class="token string">\'.left-nav\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'li.active\'</span><span class="token punctuation">)</span>.next<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>nextAll</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'.active\'</span><span class="token punctuation">)</span>.nextAll<span class="token punctuation">(</span><span class="token punctuation">)</span> // Yield all links next to <span class="token variable"><span class="token variable">`</span>.active<span class="token variable">`</span></span>\n\nFind all of the element’s siblings following .second\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"second"</span><span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>pineapples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>grapes<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token punctuation">[</span><span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>, <span class="token operator">&lt;</span>li<span class="token operator">></span>pineapples<span class="token operator">&lt;</span>/li<span class="token operator">></span>, <span class="token operator">&lt;</span>li<span class="token operator">></span>grapes<span class="token operator">&lt;</span>/li<span class="token operator">></span><span class="token punctuation">]</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'.second\'</span><span class="token punctuation">)</span>.nextAll<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nFind all of the following siblings of each li. Keep only the ones with a class selected\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"selected"</span><span class="token operator">></span>pineapples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>grapes<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>li<span class="token operator">></span>pineapples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'li\'</span><span class="token punctuation">)</span>.nextAll<span class="token punctuation">(</span><span class="token string">\'.selected\'</span><span class="token punctuation">)</span>\n\nFind all elements following the .active li\ncy.get<span class="token punctuation">(</span><span class="token string">\'.left-nav\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'li.active\'</span><span class="token punctuation">)</span>.nextAll<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>nextUntil</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span>.nextUntil<span class="token punctuation">(</span><span class="token string">\'.warning\'</span><span class="token punctuation">)</span> // Yield siblings after <span class="token string">\'div\'</span> <span class="token keyword">until</span> <span class="token string">\'.warning\'</span>\n\nFind all of the element’s siblings following <span class="token comment">#veggies until #nuts</span>\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"fruits"</span> class<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>Fruits<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"veggies"</span> class<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>Vegetables<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>cucumbers<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>carrots<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>corn<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"nuts"</span> class<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>Nuts<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>walnuts<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>cashews<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>almonds<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n//returns <span class="token punctuation">[</span><span class="token operator">&lt;</span>li<span class="token operator">></span>cucumbers<span class="token operator">&lt;</span>/li<span class="token operator">></span>, <span class="token operator">&lt;</span>li<span class="token operator">></span>carrots<span class="token operator">&lt;</span>/li<span class="token operator">></span>, <span class="token operator">&lt;</span>li<span class="token operator">></span>corn<span class="token operator">&lt;</span>/li<span class="token operator">></span><span class="token punctuation">]</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'#veggies\'</span><span class="token punctuation">)</span>.nextUntil<span class="token punctuation">(</span><span class="token string">\'#nuts\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>not</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span>.not<span class="token punctuation">(</span><span class="token string">\'.required\'</span><span class="token punctuation">)</span> // Yield all inputs without class <span class="token string">\'.required\'</span>\n\nYield the elements that <span class="token keyword">do</span> not have class active\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Home<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">\'active\'</span><span class="token operator">></span>About<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Services<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Pricing<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Contact<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'ul>li\'</span><span class="token punctuation">)</span>.not<span class="token punctuation">(</span><span class="token string">\'.active\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.length\'</span>, 4<span class="token punctuation">)</span> // <span class="token boolean">true</span>\n\nFind all buttons that are not of <span class="token function">type</span> submit\ncy.get<span class="token punctuation">(</span><span class="token string">\'form\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span>.not<span class="token punctuation">(</span><span class="token string">\'[type="submit"]\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>parent</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'header\'</span><span class="token punctuation">)</span>.parent<span class="token punctuation">(</span><span class="token punctuation">)</span> // Yield parent el of <span class="token variable"><span class="token variable">`</span>header<span class="token variable">`</span></span>\n\nGet the parent of the active li\ncy.get<span class="token punctuation">(</span><span class="token string">\'li.active\'</span><span class="token punctuation">)</span>.parent<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nGet the parent with class nav of the active li\ncy.get<span class="token punctuation">(</span><span class="token string">\'li.active\'</span><span class="token punctuation">)</span>.parent<span class="token punctuation">(</span><span class="token string">\'.nav\'</span><span class="token punctuation">)</span>\n\nAssert on the parent of the active li\ncy.get<span class="token punctuation">(</span><span class="token string">\'li.active\'</span><span class="token punctuation">)</span>.parent<span class="token punctuation">(</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.class\'</span>, <span class="token string">\'nav\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>prev</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'tr.highlight\'</span><span class="token punctuation">)</span>.prev<span class="token punctuation">(</span><span class="token punctuation">)</span> // Yield previous <span class="token string">\'tr\'</span>\n\nFind the previous element of the element with class of active\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Cockatiels<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Lorikeets<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>Cockatoos<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Conures<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Eclectus<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>li<span class="token operator">></span>Lorikeets<span class="token operator">&lt;</span>/li<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'.active\'</span><span class="token punctuation">)</span>.prev<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nFind the previous element with a class of active\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Cockatiels<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Lorikeets<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>Cockatoos<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Conures<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Eclectus<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>li<span class="token operator">></span>Cockatoos<span class="token operator">&lt;</span>/li<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'li\'</span><span class="token punctuation">)</span>.prev<span class="token punctuation">(</span><span class="token string">\'.active\'</span><span class="token punctuation">)</span>\n\nFind the previous element of the active li\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'.left-nav\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'li.active\'</span><span class="token punctuation">)</span>.prev<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>prevAll</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'.active\'</span><span class="token punctuation">)</span>.prevAll<span class="token punctuation">(</span><span class="token punctuation">)</span> // Yield all links previous to <span class="token variable"><span class="token variable">`</span>.active<span class="token variable">`</span></span>\n\nFind all of the element’s siblings before .third\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"third"</span><span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>pineapples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>grapes<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token punctuation">[</span><span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>, <span class="token operator">&lt;</span>li<span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span><span class="token punctuation">]</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'.third\'</span><span class="token punctuation">)</span>.prevAll<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nFind all of the previous siblings of each li. Keep only the ones with a class selected\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"selected"</span><span class="token operator">></span>pineapples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>grapes<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>li<span class="token operator">></span>pineapples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'li\'</span><span class="token punctuation">)</span>.prevAll<span class="token punctuation">(</span><span class="token string">\'.selected\'</span><span class="token punctuation">)</span>\n\n\nFind all elements before the .active li\ncy.get<span class="token punctuation">(</span><span class="token string">\'.left-nav\'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token string">\'li.active\'</span><span class="token punctuation">)</span>.prevAll<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>prevUntil</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'p\'</span><span class="token punctuation">)</span>.prevUntil<span class="token punctuation">(</span><span class="token string">\'.intro\'</span><span class="token punctuation">)</span> // Yield siblings before <span class="token string">\'p\'</span> <span class="token keyword">until</span> <span class="token string">\'.intro\'</span>\n\nFind all of the element’s siblings before <span class="token comment">#nuts until #veggies</span>\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"fruits"</span> class<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>Fruits<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>apples<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>oranges<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>bananas<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"veggies"</span> class<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>Vegetables<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>cucumbers<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>carrots<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>corn<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"nuts"</span> class<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>Nuts<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>walnuts<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>cashews<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>almonds<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields <span class="token punctuation">[</span><span class="token operator">&lt;</span>li<span class="token operator">></span>cucumbers<span class="token operator">&lt;</span>/li<span class="token operator">></span>, <span class="token operator">&lt;</span>li<span class="token operator">></span>carrots<span class="token operator">&lt;</span>/li<span class="token operator">></span>, <span class="token operator">&lt;</span>li<span class="token operator">></span>corn<span class="token operator">&lt;</span>/li<span class="token operator">></span><span class="token punctuation">]</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'#nuts\'</span><span class="token punctuation">)</span>.prevUntil<span class="token punctuation">(</span><span class="token string">\'#veggies\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>reload</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.reload<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nReload the page as <span class="token keyword">if</span> the user clicked ‘Refresh’\ncy.visit<span class="token punctuation">(</span><span class="token string">\'http://localhost:3000/admin\'</span><span class="token punctuation">)</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'#undo-btn\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'not.be.visible\'</span><span class="token punctuation">)</span>\ncy.reload<span class="token punctuation">(</span><span class="token punctuation">)</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'#undo-btn\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'not.be.visible\'</span><span class="token punctuation">)</span>\n\nReload the page without using the cache\ncy.visit<span class="token punctuation">(</span><span class="token string">\'http://localhost:3000/admin\'</span><span class="token punctuation">)</span>\ncy.reload<span class="token punctuation">(</span>true<span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>select</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'select\'</span><span class="token punctuation">)</span>.select<span class="token punctuation">(</span><span class="token string">\'user-1\'</span><span class="token punctuation">)</span> // Select the <span class="token string">\'user-1\'</span> option\n\n//select the option with the text apples\n<span class="token operator">&lt;</span>select<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"456"</span><span class="token operator">></span>apples<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"457"</span><span class="token operator">></span>oranges<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"458"</span><span class="token operator">></span>bananas<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n<span class="token operator">&lt;</span>/select<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"456"</span><span class="token operator">></span>apples<span class="token operator">&lt;</span>/option<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'select\'</span><span class="token punctuation">)</span>\n  .select<span class="token punctuation">(</span><span class="token string">\'apples\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.value\'</span>, <span class="token string">\'456\'</span><span class="token punctuation">)</span>\n\n  Select the option with the value “456”\n<span class="token operator">&lt;</span>select<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"456"</span><span class="token operator">></span>apples<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"457"</span><span class="token operator">></span>oranges<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"458"</span><span class="token operator">></span>bananas<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n<span class="token operator">&lt;</span>/select<span class="token operator">></span>\n\n// yields <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"456"</span><span class="token operator">></span>apples<span class="token operator">&lt;</span>/option<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'select\'</span><span class="token punctuation">)</span>\n  .select<span class="token punctuation">(</span><span class="token string">\'456\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.value\'</span>, <span class="token string">\'456\'</span><span class="token punctuation">)</span>\n\nSelect the options with the texts “apples” and “bananas”\n<span class="token operator">&lt;</span>select multiple<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"456"</span><span class="token operator">></span>apples<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"457"</span><span class="token operator">></span>oranges<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"458"</span><span class="token operator">></span>bananas<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n<span class="token operator">&lt;</span>/select<span class="token operator">></span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'select\'</span><span class="token punctuation">)</span>\n  .select<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'apples\'</span>, <span class="token string">\'bananas\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>.invoke<span class="token punctuation">(</span><span class="token string">\'val\'</span><span class="token punctuation">)</span>\n  .should<span class="token punctuation">(</span><span class="token string">\'deep.equal\'</span>, <span class="token punctuation">[</span><span class="token string">\'456\'</span>, <span class="token string">\'458\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\nSelect the options with the values “456” and “457”\n<span class="token operator">&lt;</span>select multiple<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"456"</span><span class="token operator">></span>apples<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"457"</span><span class="token operator">></span>oranges<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n  <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"458"</span><span class="token operator">></span>bananas<span class="token operator">&lt;</span>/option<span class="token operator">></span>\n<span class="token operator">&lt;</span>/select<span class="token operator">></span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'select\'</span><span class="token punctuation">)</span>\n  .select<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'456\'</span>, <span class="token string">\'457\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>.invoke<span class="token punctuation">(</span><span class="token string">\'val\'</span><span class="token punctuation">)</span>\n  .should<span class="token punctuation">(</span><span class="token string">\'deep.equal\'</span>, <span class="token punctuation">[</span><span class="token string">\'456\'</span>, <span class="token string">\'457\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\nSelect the option with the text “Homer Simpson”\ncy.get<span class="token punctuation">(</span><span class="token string">\'select\'</span><span class="token punctuation">)</span>.select<span class="token punctuation">(</span><span class="token string">\'Homer Simpson\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>should</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">.should<span class="token punctuation">(</span><span class="token string">\'be.visible\'</span><span class="token punctuation">)</span>\n\n.should<span class="token punctuation">(</span><span class="token string">\'have.class\'</span>, <span class="token string">\'open\'</span><span class="token punctuation">)</span>  \n\n.should<span class="token punctuation">(</span><span class="token string">\'contain\'</span>, <span class="token string">\'Edit User\'</span><span class="token punctuation">)</span>\n\n.should<span class="token punctuation">(</span><span class="token string">\'have.attr\'</span>, <span class="token string">\'href\'</span><span class="token punctuation">)</span>  \n\n.should<span class="token punctuation">(</span><span class="token string">\'match\'</span>, /users/<span class="token punctuation">)</span>  \n\n.should<span class="token punctuation">(</span><span class="token string">\'not.be.empty\'</span><span class="token punctuation">)</span>\n\n.should<span class="token punctuation">(</span><span class="token string">\'be.empty\'</span><span class="token punctuation">)</span>\n\n.should<span class="token punctuation">(</span><span class="token string">\'be.visible\'</span><span class="token punctuation">)</span>   \n\n.should<span class="token punctuation">(</span><span class="token string">\'have.css\'</span>, <span class="token string">\'font-family\'</span><span class="token punctuation">)</span> \n\n.should<span class="token punctuation">(</span><span class="token string">\'not.have.value\'</span>, <span class="token string">\'Jane\'</span><span class="token punctuation">)</span>\n\n.should<span class="token punctuation">(</span><span class="token string">\'have.value\'</span>, <span class="token string">\'Jane\'</span><span class="token punctuation">)</span>\n\n.should<span class="token punctuation">(</span><span class="token string">\'have.focus\'</span><span class="token punctuation">)</span>\n\n.should<span class="token punctuation">(</span><span class="token string">\'have.id\'</span>, <span class="token string">\'new-user\'</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'.error\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'be.empty\'</span><span class="token punctuation">)</span>                    // Assert that <span class="token string">\'.error\'</span> is empty\ncy.contains<span class="token punctuation">(</span><span class="token string">\'Login\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'be.visible\'</span><span class="token punctuation">)</span>              // Assert that el is visible\ncy.wrap<span class="token punctuation">(</span><span class="token punctuation">{</span> foo: <span class="token string">\'bar\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>.its<span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'eq\'</span>, <span class="token string">\'bar\'</span><span class="token punctuation">)</span> // Assert the <span class="token string">\'foo\'</span> property equals <span class="token string">\'bar\'</span>\n\n\nIn <span class="token function">most</span> cases, .should<span class="token punctuation">(</span><span class="token punctuation">)</span> yields the same subject it was given from the previous command.\ncy\n  .get<span class="token punctuation">(</span><span class="token string">\'nav\'</span><span class="token punctuation">)</span>                       // yields <span class="token operator">&lt;</span>nav<span class="token operator">></span>\n  .should<span class="token punctuation">(</span><span class="token string">\'be.visible\'</span><span class="token punctuation">)</span>             // yields <span class="token operator">&lt;</span>nav<span class="token operator">></span>\n\n  However, some chainers change the subject. In the example below, the second .should<span class="token punctuation">(</span><span class="token punctuation">)</span> yields the string sans-serif because the chainer have.css, <span class="token string">\'font-family\'</span> changes the subject.\n\ncy\n  .get<span class="token punctuation">(</span><span class="token string">\'nav\'</span><span class="token punctuation">)</span>                          // yields <span class="token operator">&lt;</span>nav<span class="token operator">></span>\n  .should<span class="token punctuation">(</span><span class="token string">\'be.visible\'</span><span class="token punctuation">)</span>                // yields <span class="token operator">&lt;</span>nav<span class="token operator">></span>\n  .should<span class="token punctuation">(</span><span class="token string">\'have.css\'</span>, <span class="token string">\'font-family\'</span><span class="token punctuation">)</span>   // yields <span class="token string">\'sans-serif\'</span>\n  .and<span class="token punctuation">(</span><span class="token string">\'match\'</span>, /serif/<span class="token punctuation">)</span>               // yields <span class="token string">\'sans-serif\'</span>\n\n\nAssert the checkbox is disabled\ncy.get<span class="token punctuation">(</span><span class="token string">\':checkbox\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'be.disabled\'</span><span class="token punctuation">)</span>\n\nAssert the class is ‘form-horizontal’\ncy.get<span class="token punctuation">(</span><span class="token string">\'form\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.class\'</span>, <span class="token string">\'form-horizontal\'</span><span class="token punctuation">)</span>\n\nAssert the value is not ‘Jane’\ncy.get<span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'not.have.value\'</span>, <span class="token string">\'Jane\'</span><span class="token punctuation">)</span>\n\nThe current subject is yielded\ncy.get<span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.id\'</span>, <span class="token string">\'new-user\'</span><span class="token punctuation">)</span>.then<span class="token punctuation">((</span><span class="token variable">$button</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  // <span class="token variable">$button</span> is yielded\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nAssert the href is equal to ‘/users’\n// have.attr comes from chai-jquery\ncy.get<span class="token punctuation">(</span><span class="token string">\'#header a\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.attr\'</span>, <span class="token string">\'href\'</span>, <span class="token string">\'/users\'</span><span class="token punctuation">)</span>\n\nAssert an input is focused after button click\ncy.get<span class="token punctuation">(</span><span class="token string">\'#btn-focuses-input\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'#input-receives-focus\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'have.focus\'</span><span class="token punctuation">)</span> // equivalent to should<span class="token punctuation">(</span><span class="token string">\'be.focused\'</span><span class="token punctuation">)</span>\n\nVerify length, content, and classes from multiple <span class="token operator">&lt;</span>p<span class="token operator">></span>\n<span class="token operator">&lt;</span>div<span class="token operator">></span>\n  <span class="token operator">&lt;</span>p class<span class="token operator">=</span><span class="token string">"text-primary"</span><span class="token operator">></span>Hello World<span class="token operator">&lt;</span>/p<span class="token operator">></span>\n  <span class="token operator">&lt;</span>p class<span class="token operator">=</span><span class="token string">"text-danger"</span><span class="token operator">></span>You have an error<span class="token operator">&lt;</span>/p<span class="token operator">></span>\n  <span class="token operator">&lt;</span>p class<span class="token operator">=</span><span class="token string">"text-default"</span><span class="token operator">></span>Try again later<span class="token operator">&lt;</span>/p<span class="token operator">></span>\n<span class="token operator">&lt;</span>/div<span class="token operator">></span>\ncy\n  .get<span class="token punctuation">(</span><span class="token string">\'p\'</span><span class="token punctuation">)</span>\n  .should<span class="token variable"><span class="token punctuation">((</span>$p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    <span class="token operator">/</span><span class="token operator">/</span> should have found <span class="token number">3</span> elements\n    expect<span class="token punctuation">(</span>$p<span class="token punctuation">)</span>.to.have.length<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n    <span class="token operator">/</span><span class="token operator">/</span> make sure the first contains some text content\n    expect<span class="token punctuation">(</span>$p.first<span class="token punctuation">(</span><span class="token punctuation">))</span></span>.to.contain<span class="token punctuation">(</span><span class="token string">\'Hello World\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"docs-header"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"main-abc123 heading-xyz987"</span><span class="token operator">></span>Introduction<span class="token operator">&lt;</span>/div<span class="token operator">></span>\n<span class="token operator">&lt;</span>/div<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'.docs-header\'</span><span class="token punctuation">)</span>\n  .find<span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span>\n  // .should<span class="token punctuation">(</span>cb<span class="token punctuation">)</span> callback <span class="token keyword">function</span> will be retried\n  .should<span class="token punctuation">((</span><span class="token variable">$div</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    expect<span class="token punctuation">(</span><span class="token variable">$div</span><span class="token punctuation">)</span>.to.have.length<span class="token punctuation">(</span>1<span class="token punctuation">)</span>\n\n    const className <span class="token operator">=</span> <span class="token variable">$div</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>.className\n\n    expect<span class="token punctuation">(</span>className<span class="token punctuation">)</span>.to.match<span class="token punctuation">(</span>/heading-/<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  // .then<span class="token punctuation">(</span>cb<span class="token punctuation">)</span> callback is not retried,\n  // it either passes or fails\n  .then<span class="token punctuation">((</span><span class="token variable">$div</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    expect<span class="token punctuation">(</span><span class="token variable">$div</span><span class="token punctuation">)</span>.to.have.text<span class="token punctuation">(</span><span class="token string">\'Introduction\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nExample below first asserts that there are 3 elements, and <span class="token keyword">then</span> checks the text contents of each one.\n<span class="token operator">&lt;</span>ul class<span class="token operator">=</span><span class="token string">"connectors-list"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Walk the dog<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Feed the cat<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Write JavaScript<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'.connectors-list > li\'</span><span class="token punctuation">)</span>.should<span class="token variable"><span class="token punctuation">((</span>$lis<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  expect<span class="token punctuation">(</span>$lis<span class="token punctuation">)</span>.to.have.length<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n  expect<span class="token punctuation">(</span>$lis.eq<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">))</span></span>.to.contain<span class="token punctuation">(</span><span class="token string">\'Walk the dog\'</span><span class="token punctuation">)</span>\n  expect<span class="token punctuation">(</span><span class="token variable">$lis</span>.eq<span class="token punctuation">(</span>1<span class="token punctuation">))</span>.to.contain<span class="token punctuation">(</span><span class="token string">\'Feed the cat\'</span><span class="token punctuation">)</span>\n  expect<span class="token punctuation">(</span><span class="token variable">$lis</span>.eq<span class="token punctuation">(</span>2<span class="token punctuation">))</span>.to.contain<span class="token punctuation">(</span><span class="token string">\'Write JavaScript\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nFor clarity you can pass a string message as a second argument to any <span class="token function">expect</span> assertion, see Chai<span class="token comment">#expect.</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'.connectors-list > li\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">((</span><span class="token variable">$lis</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  expect<span class="token punctuation">(</span><span class="token variable">$lis</span>, <span class="token string">\'3 items\'</span><span class="token punctuation">)</span>.to.have.length<span class="token punctuation">(</span>3<span class="token punctuation">)</span>\n  expect<span class="token punctuation">(</span><span class="token variable">$lis</span>.eq<span class="token punctuation">(</span>0<span class="token punctuation">)</span>, <span class="token string">\'first item\'</span><span class="token punctuation">)</span>.to.contain<span class="token punctuation">(</span><span class="token string">\'Walk the dog\'</span><span class="token punctuation">)</span>\n  expect<span class="token punctuation">(</span><span class="token variable">$lis</span>.eq<span class="token punctuation">(</span>1<span class="token punctuation">)</span>, <span class="token string">\'second item\'</span><span class="token punctuation">)</span>.to.contain<span class="token punctuation">(</span><span class="token string">\'Feed the cat\'</span><span class="token punctuation">)</span>\n  expect<span class="token punctuation">(</span><span class="token variable">$lis</span>.eq<span class="token punctuation">(</span>2<span class="token punctuation">)</span>, <span class="token string">\'third item\'</span><span class="token punctuation">)</span>.to.contain<span class="token punctuation">(</span><span class="token string">\'Write JavaScript\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nCompare text values of two elements\nThe example below gets the text contained within one element and saves it <span class="token keyword">in</span> a closure variable. Then the <span class="token function">test</span> gets the text <span class="token keyword">in</span> another element and asserts that the two text values are the same after normalizing.\n\n<span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"company-details"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>Acme Developers<span class="token operator">&lt;</span>/div<span class="token operator">></span>\n  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"identifier"</span><span class="token operator">></span>ACMEDEVELOPERS<span class="token operator">&lt;</span>/div<span class="token operator">></span>\n<span class="token operator">&lt;</span>/div<span class="token operator">></span>\nconst normalizeText <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> s.replace<span class="token punctuation">(</span>/\\s/g, <span class="token string">\'\'</span><span class="token punctuation">)</span>.toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n// will keep text from title element\n<span class="token keyword">let</span> titleText\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'.company-details\'</span><span class="token punctuation">)</span>\n  .find<span class="token punctuation">(</span><span class="token string">\'.title\'</span><span class="token punctuation">)</span>\n  .then<span class="token variable"><span class="token punctuation">((</span>$title<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    <span class="token operator">/</span><span class="token operator">/</span> save text from the first element\n    titleText <span class="token operator">=</span> normalizeText<span class="token punctuation">(</span>$title.text<span class="token punctuation">(</span><span class="token punctuation">))</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'.company-details\'</span><span class="token punctuation">)</span>\n  .find<span class="token punctuation">(</span><span class="token string">\'.identifier\'</span><span class="token punctuation">)</span>\n  .should<span class="token variable"><span class="token punctuation">((</span>$identifier<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    <span class="token operator">/</span><span class="token operator">/</span> we can massage text before comparing\n    const idText <span class="token operator">=</span> normalizeText<span class="token punctuation">(</span>$identifier.text<span class="token punctuation">(</span><span class="token punctuation">))</span></span>\n\n    // text from the title element should already be <span class="token keyword">set</span>\n    expect<span class="token punctuation">(</span>idText, <span class="token string">\'ID\'</span><span class="token punctuation">)</span>.to.equal<span class="token punctuation">(</span>titleText<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nIn this example we use .and<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">which</span> is identical to .should<span class="token punctuation">(</span><span class="token punctuation">)</span>.\n// our subject is not changed by our first assertion,\n// so we can <span class="token keyword">continue</span> to use DOM based assertions\ncy.get<span class="token punctuation">(</span><span class="token string">\'option:first\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'be.selected\'</span><span class="token punctuation">)</span>.and<span class="token punctuation">(</span><span class="token string">\'have.value\'</span>, <span class="token string">\'Metallica\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>siblings</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'td\'</span><span class="token punctuation">)</span>.siblings<span class="token punctuation">(</span><span class="token punctuation">)</span>           // Yield all td<span class="token string">\'s siblings\ncy.get(\'</span>li<span class="token string">\').siblings(\'</span>.active<span class="token string">\')  // Yield all li\'</span>s siblings with class <span class="token string">\'.active\'</span>\n\nGet the siblings of each li\n<span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Home<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Contact<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"active"</span><span class="token operator">></span>Services<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n  <span class="token operator">&lt;</span>li<span class="token operator">></span>Price<span class="token operator">&lt;</span>/li<span class="token operator">></span>\n<span class="token operator">&lt;</span>/ul<span class="token operator">></span>\n\n// yields all other li<span class="token string">\'s in list\ncy.get(\'</span>.active<span class="token string">\').siblings()\n\nGet siblings of element with class active\n// yields &lt;li class="active">Services&lt;/li>\ncy.get(\'</span>li<span class="token string">\').siblings(\'</span>.active<span class="token string">\')\n\nGet the siblings of element with class active\ncy.get(\'</span>.left-nav<span class="token string">\').find(\'</span>li.active\'<span class="token punctuation">)</span>.siblings<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>submit</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'form\'</span><span class="token punctuation">)</span>.submit<span class="token punctuation">(</span><span class="token punctuation">)</span>   // Submit a form\n\nSubmit can only be called on a single form\n<span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"contact"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>Send<span class="token operator">&lt;</span>/button<span class="token operator">></span>\n<span class="token operator">&lt;</span>/form<span class="token operator">></span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'#contact\'</span><span class="token punctuation">)</span>.submit<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nSubmit a form\ncy.route<span class="token punctuation">(</span><span class="token string">\'POST\'</span>, <span class="token string">\'/users\'</span>, <span class="token string">\'fixture:user\'</span><span class="token punctuation">)</span>.as<span class="token punctuation">(</span><span class="token string">\'userSuccess\'</span><span class="token punctuation">)</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'form\'</span><span class="token punctuation">)</span>.submit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>type</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span>.type<span class="token punctuation">(</span><span class="token string">\'Hello, World\'</span><span class="token punctuation">)</span> // Type <span class="token string">\'Hello, World\'</span> into the <span class="token string">\'input\'</span>\n\nType into a textarea.\ncy.get<span class="token punctuation">(</span><span class="token string">\'textarea\'</span><span class="token punctuation">)</span>.type<span class="token punctuation">(</span><span class="token string">\'Hello world\'</span><span class="token punctuation">)</span> // yields <span class="token operator">&lt;</span>textarea<span class="token operator">></span>\n\nEach keypress is delayed 10ms by default <span class="token keyword">in</span> order to simulate how a very fast user types<span class="token operator">!</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'[contenteditable]\'</span><span class="token punctuation">)</span>.type<span class="token punctuation">(</span><span class="token string">\'some text!\'</span><span class="token punctuation">)</span>\n\nType into a non-input or non-textarea element with tabindex\n<span class="token operator">&lt;</span>body<span class="token operator">></span>\n  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"el"</span> tabindex<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>\n    This div can receive focus<span class="token operator">!</span>\n  <span class="token operator">&lt;</span>/div<span class="token operator">></span>\n<span class="token operator">&lt;</span>/body<span class="token operator">></span>\n\ncy.get<span class="token punctuation">(</span><span class="token string">\'#el\'</span><span class="token punctuation">)</span>.type<span class="token punctuation">(</span><span class="token string">\'supercalifragilisticexpialidocious\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>uncheck</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.get<span class="token punctuation">(</span><span class="token string">\'[type="checkbox"]\'</span><span class="token punctuation">)</span>.uncheck<span class="token punctuation">(</span><span class="token punctuation">)</span>   // Unchecks checkbox element\n\nUncheck all checkboxes\ncy.get<span class="token punctuation">(</span><span class="token string">\':checkbox\'</span><span class="token punctuation">)</span>.uncheck<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nUncheck element with the <span class="token function">id</span> ‘saveUserName’\ncy.get<span class="token punctuation">(</span><span class="token string">\'#saveUserName\'</span><span class="token punctuation">)</span>.uncheck<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nUncheck the checkbox with the value of ‘ga’\ncy.get<span class="token punctuation">(</span><span class="token string">\'input[type="checkbox"]\'</span><span class="token punctuation">)</span>.uncheck<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'ga\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\nUncheck the checkboxes with the values ‘ga’ and ‘ca’\ncy.get<span class="token punctuation">(</span><span class="token string">\'[type="checkbox"]\'</span><span class="token punctuation">)</span>.uncheck<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'ga\'</span>, <span class="token string">\'ca\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\nUncheck the first checkbox\ncy.get<span class="token punctuation">(</span><span class="token string">\'[data-js="choose-all"]\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>\n  .find<span class="token punctuation">(</span><span class="token string">\'input[type="checkbox"]\'</span><span class="token punctuation">)</span>.first<span class="token punctuation">(</span><span class="token punctuation">)</span>.uncheck<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>cy.url</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.url<span class="token punctuation">(</span><span class="token punctuation">)</span>    // Yields the current URL as a string\n\nAssert the URL is http://localhost:8000/users/1/edit\n// clicking the anchor causes the browser to follow the <span class="token function">link</span>\ncy.get<span class="token punctuation">(</span><span class="token string">\'#user-edit a\'</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span><span class="token punctuation">)</span>\ncy.url<span class="token punctuation">(</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'include\'</span>, <span class="token string">\'/users/1/edit\'</span><span class="token punctuation">)</span> // <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>\ncy.url<span class="token punctuation">(</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'eq\'</span>, <span class="token string">\'http://localhost:8000/users/1/edit\'</span><span class="token punctuation">)</span> // <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>\n\nGiven the remote URL, http://localhost:8000/index.html, all 3 of these assertions are the same.\ncy.location<span class="token punctuation">(</span><span class="token string">\'href\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'include\'</span>, <span class="token string">\'/index.html\'</span><span class="token punctuation">)</span>\ncy.location<span class="token punctuation">(</span><span class="token punctuation">)</span>.its<span class="token punctuation">(</span><span class="token string">\'href\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'include\'</span>, <span class="token string">\'/index.html\'</span><span class="token punctuation">)</span>\ncy.url<span class="token punctuation">(</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'include\'</span>, <span class="token string">\'/index.html\'</span><span class="token punctuation">)</span>\n\ncy.url<span class="token punctuation">(</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'contain\'</span>, <span class="token string">\'#users/new\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>cy.visit</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.visit<span class="token punctuation">(</span><span class="token string">\'http://localhost:3000\'</span><span class="token punctuation">)</span>    // Yields the window of the remote page\n\n// Wait 30 seconds <span class="token keyword">for</span> page <span class="token string">\'load\'</span> event\ncy.visit<span class="token punctuation">(</span><span class="token string">\'/index.html\'</span>, <span class="token punctuation">{</span> timeout: 30000 <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ncy.visit<span class="token punctuation">(</span><span class="token string">\'https://www.acme.com/\'</span>, <span class="token punctuation">{</span>\n  auth: <span class="token punctuation">{</span>\n    username: <span class="token string">\'wile\'</span>,\n    password: <span class="token string">\'coyote\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n// this is the same thing as providing the auth object\ncy.visit<span class="token punctuation">(</span><span class="token string">\'https://wile:coyote@www.acme.com\'</span><span class="token punctuation">)</span>\n\nSubmit a form\nTo send a request that looks like a user submitting an HTML form, use a POST method with a body containing the form values:\n\ncy.visit<span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url: <span class="token string">\'http://localhost:3000/cgi-bin/newsletterSignup\'</span>,\n  method: <span class="token string">\'POST\'</span>,\n  body: <span class="token punctuation">{</span>\n    name: <span class="token string">\'George P. Burdell\'</span>,\n    email: <span class="token string">\'burdell@microsoft.com\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h2>cy.wrap</h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">cy.wrap<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token string">\'Jane Lane\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ninvoke the <span class="token keyword">function</span> on the subject <span class="token keyword">in</span> wrap and <span class="token keyword">return</span> the new value\nconst getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">\'Jane Lane\'</span>\n<span class="token punctuation">}</span>\n\ncy.wrap<span class="token punctuation">(</span><span class="token punctuation">{</span> name: getName <span class="token punctuation">}</span><span class="token punctuation">)</span>.invoke<span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">)</span>.should<span class="token punctuation">(</span><span class="token string">\'eq\'</span>, <span class="token string">\'Jane Lane\'</span><span class="token punctuation">)</span> // <span class="token boolean">true</span>\n\ncy.wrap<span class="token punctuation">(</span><span class="token punctuation">{</span> amount: 10 <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  .should<span class="token punctuation">(</span><span class="token string">\'have.property\'</span>, <span class="token string">\'amount\'</span><span class="token punctuation">)</span>\n  .and<span class="token punctuation">(</span><span class="token string">\'eq\'</span>, 10<span class="token punctuation">)</span>\n\n  </code></pre>\n      </div>\n<h2></h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"></code></pre>\n      </div>\n<h2></h2>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"></code></pre>\n      </div>',
frontmatter:{title:"Cypress"}},footnote:{id:"/home/cypress/website1/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:""},site:{siteMetadata:{facebook:{appId:""}}}},pathContext:{slug:"/cypress/"}}}});
//# sourceMappingURL=path---cypress-24030c064c62385c88b9.js.map